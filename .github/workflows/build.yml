name: Rust Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup QEMU
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build binary
        run: |
          docker build \
            --platform ${{ matrix.target == 'aarch64-unknown-linux-gnu' && 'linux/arm64' || 'linux/amd64' }} \
            --build-arg TARGET=${{ matrix.target }} \
            --build-arg APP_NAME=discord-ratelimit-reporter \
            -t binary-build:${{ matrix.target }} \
            --target build-stage \
            .

      - name: Extract binary from container
        run: |
          docker create --name temp-container binary-build:${{ matrix.target }}
          docker cp temp-container:/bin/server ./discord-ratelimit-reporter-${{ matrix.target }}
          docker rm temp-container

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: discord-ratelimit-reporter-${{ matrix.target }}
          path: ./discord-ratelimit-reporter-${{ matrix.target }}
          if-no-files-found: error

  build-and-push-image:
    name: Build and Push Multi-Arch Image
    runs-on: ubuntu-latest
    needs: build-binaries
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./binaries

      - name: Prepare binaries for Docker
        run: |
          mkdir -p ./docker-context/binaries
          cp ./binaries/discord-ratelimit-reporter-x86_64-unknown-linux-gnu/discord-ratelimit-reporter-x86_64-unknown-linux-gnu ./docker-context/binaries/discord-ratelimit-reporter-x86_64
          cp ./binaries/discord-ratelimit-reporter-aarch64-unknown-linux-gnu/discord-ratelimit-reporter-aarch64-unknown-linux-gnu ./docker-context/binaries/discord-ratelimit-reporter-aarch64
          chmod +x ./docker-context/binaries/discord-ratelimit-reporter-*

      - name: Create Dockerfile for final image
        run: |
          cat > ./docker-context/Dockerfile.amd64 << 'EOF'
          FROM debian:bookworm-slim
          #RUN apt update && apt install -y libssl-dev ca-certificates
          
          # Create a non-privileged user
          ARG UID=10001
          RUN adduser \
              --disabled-password \
              --gecos "" \
              --home "/nonexistent" \
              --shell "/sbin/nologin" \
              --no-create-home \
              --uid "${UID}" \
              appuser
          
          COPY binaries/discord-ratelimit-reporter-x86_64 /bin/server
          USER appuser
          CMD ["/bin/server"]
          EOF

          cat > ./docker-context/Dockerfile.arm64 << 'EOF'
          FROM debian:bookworm-slim
          #RUN apt update && apt install -y libssl-dev ca-certificates
          
          # Create a non-privileged user
          ARG UID=10001
          RUN adduser \
              --disabled-password \
              --gecos "" \
              --home "/nonexistent" \
              --shell "/sbin/nologin" \
              --no-create-home \
              --uid "${UID}" \
              appuser
          
          COPY binaries/discord-ratelimit-reporter-aarch64 /bin/server
          USER appuser
          CMD ["/bin/server"]
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long
            latest

      - name: Build and push x86_64 image
        uses: docker/build-push-action@v5
        with:
          context: ./docker-context
          file: ./docker-context/Dockerfile.amd64
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64
          tags: ghcr.io/${{ github.repository }}:amd64-latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push aarch64 image
        uses: docker/build-push-action@v5
        with:
          context: ./docker-context
          file: ./docker-context/Dockerfile.arm64
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/arm64
          tags: ghcr.io/${{ github.repository }}:arm64-latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create and push multi-arch manifest
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          # Install latest docker cli to support manifest command
          curl -fsSL https://get.docker.com | sh
          
          # Create and push manifest for latest tag
          docker manifest create ghcr.io/${{ github.repository }}:latest \
            --amend ghcr.io/${{ github.repository }}:amd64-latest \
            --amend ghcr.io/${{ github.repository }}:arm64-latest
          docker manifest push ghcr.io/${{ github.repository }}:latest
          
          # Create and push manifests for other tags
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' ' | sed 's/ghcr\.io\/[^:]*://g' | grep -v "latest"); do
            echo "Creating manifest for tag: $tag"
            docker manifest create ghcr.io/${{ github.repository }}:$tag \
              --amend ghcr.io/${{ github.repository }}:amd64-latest \
              --amend ghcr.io/${{ github.repository }}:arm64-latest
            docker manifest push ghcr.io/${{ github.repository }}:$tag
          done