name: Client Build

on:
  push:
    branches: [ main ]
    paths:
      - 'client/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/client-build.yml'
      - 'Dockerfile.client'
  pull_request:
    branches: [ main ]
    paths:
      - 'client/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/client-build.yml'
      - 'Dockerfile.client'
  workflow_dispatch:

jobs:
  build-binaries:
    name: Build Client Binaries
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup QEMU
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Create Dockerfile.client if doesn't exist
        run: |
          if [ ! -f Dockerfile.client ]; then
            cp Dockerfile Dockerfile.client
          fi

      - name: Build binary
        run: |
          docker build \
            --platform ${{ matrix.target == 'aarch64-unknown-linux-gnu' && 'linux/arm64' || 'linux/amd64' }} \
            --build-arg TARGET=${{ matrix.target }} \
            --build-arg APP_NAME=client \
            --build-arg BIN_PATH=src/bin/client \
            -t client-binary-build:${{ matrix.target }} \
            --target build-stage \
            -f Dockerfile.client \
            .

      - name: Extract binary from container
        run: |
          docker create --name temp-container client-binary-build:${{ matrix.target }}
          docker cp temp-container:/bin/client ./discord-client-${{ matrix.target }}
          docker rm temp-container

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: discord-client-${{ matrix.target }}
          path: ./discord-client-${{ matrix.target }}
          if-no-files-found: error

  build-and-push-image:
    name: Build and Push Client Multi-Arch Image
    runs-on: ubuntu-latest
    needs: build-binaries
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./binaries

      - name: Prepare binaries for Docker
        run: |
          ls -la ./binaries
          mkdir -p ./docker-context
          cp ./binaries/discord-client-x86_64-unknown-linux-gnu/discord-client-x86_64-unknown-linux-gnu ./docker-context/discord-client-amd64
          cp ./binaries/discord-client-aarch64-unknown-linux-gnu/discord-client-aarch64-unknown-linux-gnu ./docker-context/discord-client-arm64
          chmod +x ./docker-context/discord-client-*
          ls -la ./docker-context

      - name: Create Dockerfile for final image
        run: |
          cat > ./docker-context/Dockerfile << 'EOF'
          FROM debian:bookworm-slim
          
          # Create a non-privileged user
          ARG UID=10001
          RUN adduser \
              --disabled-password \
              --gecos "" \
              --home "/nonexistent" \
              --shell "/sbin/nologin" \
              --no-create-home \
              --uid "${UID}" \
              appuser
          
          ARG TARGETARCH
          COPY discord-client-${TARGETARCH} /bin/client
          USER appuser
          CMD ["/bin/client"]
          EOF

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/client
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long
            latest

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: ./docker-context
          file: ./docker-context/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max